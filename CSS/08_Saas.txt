CSS preprocessors:
    1. CSS pre-processor comes with syntax advancements. 
    2. Style sheets in the advanced syntax are processed by the program, and 
    turned into regular CSS style sheets. 
    3. However, they do not extend the CSS standard itself.

    Why pre-process CSS ?
        CSS on its own can be fun, but stylesheets are getting larger, more complex,
    and harder to maintain. This is where a preprocessor can help. 
    
    Popular processor:
        1. Sass(Syntactically awesome style sheets) 

        2. LESS


    A browser does not understand Sass code.
    Therefore, Sass pre-processor need to convert Sass code into standard CSS.

Sass:
    It has features that don't exist in CSS yet like nesting, 
mixins, inheritance, and other nifty goodies that help you write robust, maintainable CSS.

1. Sass is a stylesheet language thatâ€™s compiled to CSS. 
2. It allows you to use variables, nested rules, mixins, functions, and more, all with 
a fully CSS-compatible syntax. 
3. Sass helps keep large stylesheets well-organized and makes it easy to share design within and across projects.


There are two syntaxes available for Sass. 
The first, known as SCSS (Sassy CSS) and used throughout this reference, is an extension of the syntax of CSS. 
This means that every valid CSS stylesheet is a valid SCSS file with the same meaning



Ref: https://sass-lang.com/guide

-----------------------------
1. Variables :
-----------------------------
/* Declaring variables */
$Error: #a2b9bc;
$Warning: #b2ad7f;
$Message: #878f99;

/* Using variable */
.foo {
    color: $Error; // some inline comment
}

-----------------------------
2. Nesting :
-----------------------------

SCSS

nav {
  ul {
    margin: 0;
    padding: 0;
    list-style: none;
  }

  li { display: inline-block; }

  a {
    display: block;
    padding: 6px 12px;
    text-decoration: none;
  }
}

same styling using CSS
nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav li {
  display: inline-block;
}
nav a {
  display: block;
  padding: 6px 12px;
  text-decoration: none;
}


-----------------------------
3. Modules
-----------------------------

Modules allows to split css into more than one stylesheet. below is an example

// _base.scss
$font-stack: Helvetica, sans-serif;
$primary-color: #333;

body {
  font: 100% $font-stack;
  color: $primary-color;
}
// styles.scss
@use 'base';

.inverse {
  background-color: base.$primary-color;
  color: white;
}

-----------------------------
4. Mixins
-----------------------------
@mixin theme($theme: DarkGray) {
  background: $theme;
  box-shadow: 0 0 1px rgba($theme, .25);
  color: #fff;
}

.info {
  @include theme;
}
.alert {
  @include theme($theme: DarkRed);
}
.success {
  @include theme($theme: DarkGreen);
}

-----------------------------
5. Extend or inheritance
-----------------------------
Using @extend lets you share a set of CSS properties from one selector to another.

// foo.scss
%message-shared {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.message {
  @extend %message-shared;
}

.success {
  @extend %message-shared;
  border-color: green;
}

// main.css
.message, .success {
  border: 1px solid #ccc;
  padding: 10px;
  color: #333;
}

.success {
  border-color: green;
}


-----------------------------
6. Operator
-----------------------------

@use "sass:math";

.foo {
  width: math.div(50px, 400px) * 100%;
}