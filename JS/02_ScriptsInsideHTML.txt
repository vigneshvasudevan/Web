
Where to put the JS?
        
    Javascript can be embedded inside <script> tag or 
    can be included as a separate file i.e

    Method1:
        Inside the HTML put raw JS code

        a: Inside the head
        b: Inside the body after the elements but why ?
            Short answer: To ensure DOM is ready
            
            JS usually manipulates on HTML elements so it makes 
        sense to render the page first and then load JS. Otherwise 
        JS may not see few elements.

        <script> 
            const message = "Hello world";
            console.log(message);
        </script>

    Method2: Separate file
        <script src="foo.js"></script>

        Note: foo.js will be first fetched from the server
        and kept at the client. 

        Pros:
        1. Separation of concerns : HTML is for data,
            JS is for modying the data.
        2. Having them outside HTML allows async JS fetch, In other
        words as we render JS we can fetch JS
        3. Possibly web browsers can cache JS

    Generally speaking scripts are often “heavier” than HTML 
    their download size is larger, and processing time is also 
    longer.


    How does browser parses HTML:

    Ref: https://blog.webdevsimplified.com/2019-12/javascript-loading-attributes-explained/


    Consider an example when we include script tag b/w the HTML
        <p>...content before script...</p>
        <script src="https://someServer/long.js"></script>
        <!-- This isn't visible until the script loads -->
        <p>...content after script...</p>

        What went wrong here: 
            When the browser encounters a script tag it stops parsing HTML, 
        it synchronously loads and executes JavaScript code and only then continues 
        parsing the HTML following the script tag.

        start live Server for WebDev/JS/JSLoading/bigWithSlow.html and observe
        we wouldn't 'DONE' instead it will be 'LOADING'

        How can we avoid it ?

            As mentioned before put script to the end of body

                <body>
                    <!--...all elements added before script... -->
                    <script src="https://someServer/long.js"></script>
                </body>

                But this solution is far from perfect. For example, the browser notices
                the script (and can start downloading it) only after it downloaded 
                the full HTML document.

                <script> attributes that solve the problem for us: defer and async.

                a) async
                    async attribute similar to defer except the fact it enables
                    non-blocking loading of script
                    

                    The first attribute is the async attribute. To create an async 
                    script tag the following code is used 
                    <script async src="script.js"></script>. This attribute when applied
                    to a script tag will make the script tag work just like img tags to
                    the parser. This means the parser will download the JavaScript in the
                    background and continue parsing as normal without waiting. When the 
                    JavaScript is done being downloaded then the parser will immediately 
                    stop parsing and execute the JavaScript. This is great for any small 
                    JavaScript code that is not dependent on anything else, but since the 
                    JavaScript is executed as soon as it is downloaded, the parser could 
                    still be delayed by JavaScript that takes a long time to execute. 
                    Another huge downside of the async attribute is that the JavaScript 
                    files are not executed in the order they are defined in the HTML. 
                    They are instead executed in the order they are downloaded. 
                    This means a quicker to download file will always execute before a 
                    slower to download file which can cause big problems if the JavaScript
                    files are dependent on one another
                    
                    
                b) defer
                    Similar to the async attribute, the defer attribute will not stop 
                    parsing to download the JavaScript. To create a defer script tag 
                    the following code is used <script defer src="script.js"></script>.

                    Scripts with defer always execute when the DOM is ready 
                    (but before DOMContentLoaded event).

                    The parser will download the JavaScript in the background and 
                    continue parsing, but unlike the async attribute, the defer 
                    attribute will not execute the JavaScript until after the entire 
                    HTML document is parsed. This means that with the defer attribute 
                    the HTML parsing will never be delayed by the downloading of 
                    JavaScript. Also, since the JavaScript is executed after the entire
                    HTML document is parsed the order of the JavaScript files is 
                    maintained. This is because all defer attribute JavaScript files 
                    must be downloaded before any of them can be executed. 
                    
                    In other words it also preserves the order of my JavaScript as if it 
                    was loaded without the defer attribute. Loading JavaScript with the 
                    defer attribute is essentially the same as loading JavaScript at the 
                    end of the body, but it will start the download sooner. Also, since 
                    the executing of the JavaScript is always done after the HTML is 
                    parsed, there is no need to wait for document ready events. The 
                    document will always be ready when a defer attributed script tag 
                    is executed.


            

        Ref: 
        https://html.spec.whatwg.org/multipage/scripting.html#:~:text=4.12.1-,The%20script%20element,-✔MDN
        https://blog.webdevsimplified.com/2019-12/javascript-loading-attributes-explained/